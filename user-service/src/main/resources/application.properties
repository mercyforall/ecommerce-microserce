# === user-service ===
# Server port
server.port=8083

# Application name
spring.application.name=user-service

# Config server
spring.config.import=optional:configserver:http://localhost:8888

# MySQL datasource
spring.datasource.url=jdbc:mysql://localhost:3306/userdb
spring.datasource.username=root
spring.datasource.password=root

# JPA configuration
spring.jpa.hibernate.ddl-auto=update

# Kafka
spring.kafka.bootstrap-servers=localhost:9092

# Eureka discovery
eureka.client.service-url.defaultZone=http://localhost:8761/eureka

# Logging levels
logging.level.org.springframework.web=DEBUG
logging.level.org.springframework.kafka=DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# === OPTIONAL: Enable security ===
# security.user.name=user
# security.user.password=password

# === OPTIONAL: Enable JWT Authentication ===
# jwt.secret=your_jwt_secret_key
# jwt.expiration=3600  # in seconds

# === OPTIONAL: Enable OAuth2 with Google ===
# spring.security.oauth2.client.registration.google.client-id=your_google_client_id
# spring.security.oauth2.client.registration.google.client-secret=your_google_client_secret
# spring.security.oauth2.client.registration.google.scope=profile,email
# spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/auth
# spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
# spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
# spring.security.oauth2.client.provider.google.user-name-attribute=sub
# spring.security.oauth2.client.provider.google.jwk-set-uri=https://www.googleapis.com/oauth2/v3/certs

# === OPTIONAL: Enable Rate Limiting (requires Redis & Spring Cloud Gateway) ===
# spring.cloud.gateway.global-filter.name=RequestRateLimiter
# spring.cloud.gateway.global-filter.args.redis-rate-limiter.replenish-rate=10
# spring.cloud.gateway.global-filter.args.redis-rate-limiter.burst-capacity=20

# === OPTIONAL: Enable Circuit Breaker with Resilience4j ===
# spring.cloud.circuitbreaker.enabled=true
# resilience4j.circuitbreaker.instances.user-service.sliding-window-size=10
# resilience4j.circuitbreaker.instances.user-service.permitted-number-of-calls-in-half-open-state=5
# resilience4j.circuitbreaker.instances.user-service.failure-rate-threshold=50
# resilience4j.circuitbreaker.instances.user-service.wait-duration-in-open-state=10000
# resilience4j.circuitbreaker.instances.user-service.minimum-number-of-calls=5
# resilience4j.circuitbreaker.instances.user-service.slow-call-rate-threshold=50
# resilience4j.circuitbreaker.instances.user-service.slow-call-duration-threshold=1000
# resilience4j.circuitbreaker.instances.user-service.automatic-transition-from-open-to-half-open-enabled=true
# resilience4j.circuitbreaker.instances.user-service.record-exceptions=java.lang.Exception
# resilience4j.circuitbreaker.instances.user-service.ignore-exceptions=org.springframework.web.client.HttpServerErrorException
# resilience4j.circuitbreaker.instances.user-service.sliding-window-type=COUNT_BASED